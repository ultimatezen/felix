<!--************************************************************************-->
<!--******** Main QHTML skin of the application ****************************-->
<!--************************************************************************-->
<!--- Created by Vitaly Tomilov ------->
<!--- Last modified on 29.03.2003 ----->
<!--- The main idea of this document is to show how tag CONTROL can be used
to bring together the power of HTML+XML to format controls in QHTML documents,
i.e. how to organize user interface using QHTML--->
<body bgcolor="3dface"> <!---If you remove "bgcolor=3dface" make sure to uncomment
						line "m_html.Transparent = true;" in the CStaticControlsDlg
						constructor :-) --->
	<!---
Sustain the same font just for the shadow effect to stay correct :-)
This is because the dialog box itself uses static font!!! :-)
--->
	<font face='MS Sans Serif' size="8">
		<table border="1" bc="darkblue" cp="10">
			<tr bgcolor="skyblue" gfc="white" grad="vert">
				<td>
					This example illustrates integration of <b>UI</b> and <b>QHTML</b> by using tag <font color="darkred" weight="700">
						CONTROL</font><br>
					The program draws a single <b>QHTML</b> document on the dialog box with a few 
					controls embedded<br>
					into the document.<br>
					All these controls are aligned by and linked to the <b>QHTML</b> document using 
					tag <font color="darkred" weight="700">CONTROL</font>.<br>
					The three buttons also make use of custom attribute <font color="darkblue" weight="700">
						caption</font> to initialize their titles just to show<br>
					how custom attributes can be used. EditBox is initialized using custom 
					attribute <font color="darkblue" weight="700">text</font>
				</td>
			</tr>
			<tr bgcolor="palegreen" gfc="yellow">
				<td align="center">
					<table>
						<tr valign="middle">
							<td>
								<!---For the following three buttons we even initialize
								their titles using a custom attribute "caption" in tags--->
								<control id="1" width="100" height="40" caption="&Regular Button"></td>
							<td>
								<control id="2" width="50" height="50" caption="&Square Button"></td>
							<td>
								<control id="3" width="200" height="30" caption="&Long Button">
							</td>
						</tr>
					</table>
				</td>
			</tr>
			<tr>
				<td>
					<font color="darkred" weight="700">Standard Hyperlink Object: </font>
					<!---
					As an example we use custom attributes URL and COLOR to set up
					the hyperlink object:
					--->
					<control id="4" width="90" height="15" url="http://www.tooltips.net" color="green">
				</td>
			</tr>
			<tr valign="middle">
				<td>
					<table>
						<tr valign="middle">
							<td>
								<font color="darkgreen" weight="700">An edit box:</font>
							</td>
							<td>
								<control id="5" name="EditBox" width="150" height="20" text="This text came from QHTML">
							</td>
							<td>
								<font color="DarkBlue" weight="700">Check box: </font>
								<control id="6" name="CheckBox" width="120" height="15">
							</td>
						</tr>
					</table>
				</td>
			</tr>
			<tr>
				<td align="center">
					<table cp="0">
						<tr>
							<td>
								<table border="1" gfc="#909090" bgcolor="white" bc="gray">
									<tr>
										<td width=350>
											Using <b>QHTML</b> documents with tag <font color="darkred" weight="700">CONTROL</font>
											allows full description<br>
											of any user interface. It incorporates the power of <b>HTML</b> and <b>XML</b><br>
											to describe size, position and all possible initialization parameters<br>
											for any control to be placed in the <b>UI</b>. Even for those controls<br>
											whose size is dynamic the parser will fire event <b>OnControlGetSize</b><br>
											to get size of such controls, thus making it possible to allocate<br>
											dynamic controls within <b>QHTML</b> as well.
										</td>
										<td>
											<table border="1" bc="white" cs="1">
												<tr bgcolor="white" gfc="gray">
													<td>
														QHTML Skins:</td>
												</tr>
												<tr>
													<td bgcolor="3dface">
														<control id="7" name="Radio Button 1" width="70" height="22">
															<br>
															<control id="8" name="Radio Button 2" width="70" height="22">
																<br>
																<control id="9" name="Radio Button 3" width="70" height="22">
													</td>
												</tr>
											</table>
										</td>
									</tr>
								</table>
								<!---
								Here we implement a simple shadow for the table to improve design:
								It is really nothing, just to show off what extra can be done
								in QHTML :-)
								--->
								<table cp="0">
									<tr>
										<td height="6"></td>
									</tr>
									<tr>
										<td width="3" height="91" bgcolor="black"></td>
									</tr>
								</table>
								<br>
								<table cp="0">
									<tr>
										<td width="6"></td>
										<td height="3" width="429" bgcolor="black"></td>
									</tr>
								</table>
								<!---end of shadow implementation--->
							</td>
						</tr>
					</table>
				</td>
			</tr>
		</table>
	</font>
<!---Now font can be of any size, we do not really care :-)>

<!--************************************************************************--->
<!--******** End of the document *******************************************--->
<!--************************************************************************--->
